@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject ListenTogetherHubClient ListenTogetherHubClient

<div class="listen-together-wrapper">
    <div class="listen-together-sidebar">
        <div class="titleWrapper">
            <TitlePage Label="Nghe cùng nhau" />
        </div>

        <div class="listen-together-join-room-code">
            <p>Nhập mã phòng bên dưới để tham gia vào một phòng có sẵn.</p>

            <EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="roomCode__input">
                    <InputText @ref="inputRef" class="inputApp"
                               @bind-Value="formModel.RoomCode"
                               placeholder="Mã phòng" />
                    <ValidationSummary />
                </div>

                <button type="submit" class="buttonApp primary" title="Tham gia phòng">
                    <span class="buttonApp-icon icon-listen-together"></span>
                    <span>Tham gia phòng</span>
                </button>
            </EditForm>
        </div>
    </div>

    <div class="listen-together-main listen-together-main__rooms">
        <ListenTogetherEmptyRoom Message="Bạn có thể tạo một phòng hoặc tham gia vào một phòng có sẵn"
                                 Description="Bạn phải đang nghe một podcast để có thể tạo phòng mới."
                                 IsDisabled="@(!CanCreateRoom)"
                                 OnCreateRoom="@OnCreateRoom" />
    </div>

</div>

@code {
    private record FormModel()
    {
        [Required, Display(Name = "Mã phòng")] public string? RoomCode { get; set; }
    };

    [EditorRequired]
    [Parameter]
    public bool CanCreateRoom { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public EventCallback OnCreateRoom { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback<string> OnJoinRoom { get; set; }

    private InputText? inputRef;
    private FormModel formModel = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && inputRef?.Element != null)
        {
            await inputRef.Element.Value.FocusAsync();
        }
    }

    private Task HandleValidSubmit() => OnJoinRoom.InvokeAsync(formModel.RoomCode);
}
